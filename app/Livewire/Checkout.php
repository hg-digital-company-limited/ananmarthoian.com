<?php

namespace App\Livewire;

use App\Models\OrderItem;
use Illuminate\Support\Facades\Http;
use Livewire\Component;
use App\Helpers\CartManagement; // Nh·∫≠p l·ªõp CartManagement
use App\Models\Order; // Nh·∫≠p model Order
use Illuminate\Support\Facades\Auth; // Th√™m ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
use Illuminate\Support\Facades\Redirect; // Th√™m ƒë·ªÉ chuy·ªÉn h∆∞·ªõng
use App\Models\Product;
use Jantinnerezo\LivewireAlert\LivewireAlert;
class Checkout extends Component
{
    use LivewireAlert;
    public $cartItems = []; // Thu·ªôc t√≠nh ƒë·ªÉ l∆∞u gi·ªè h√†ng
    public $user; // Thu·ªôc t√≠nh ƒë·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng
    public $fullName; // Thu·ªôc t√≠nh ƒë·ªÉ l∆∞u t√™n ƒë·∫ßy ƒë·ªß
    public $phone; // Thu·ªôc t√≠nh ƒë·ªÉ l∆∞u s·ªë ƒëi·ªán tho·∫°i
    public $address; // Thu·ªôc t√≠nh ƒë·ªÉ l∆∞u ƒë·ªãa ch·ªâ
    public $shippingMethod; // Thu·ªôc t√≠nh ƒë·ªÉ l∆∞u ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn

    public function mount()
    {
        $this->cartItems = CartManagement::getCartItemsFromCookie(); // L·∫•y gi·ªè h√†ng t·ª´ cookie
        $this->user = Auth::user(); // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
        $this->shippingMethod = 'cod'; // G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c·∫ßn
        if ($this->user) {
            $this->fullName = $this->user->name; // L∆∞u t√™n ƒë·∫ßy ƒë·ªß
            $this->phone = $this->user->phone; // L∆∞u s·ªë ƒëi·ªán tho·∫°i
            $this->address = $this->user->address; // L∆∞u ƒë·ªãa ch·ªâ (gi·∫£ s·ª≠ tr∆∞·ªùng n√†y t·ªìn t·∫°i)
        }
    }

    public function logout()
    {
        Auth::logout(); // ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
        return Redirect::to('/login'); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
    }

    public function calculateSubtotal()
    {
        return CartManagement::calculateGrandTotal($this->cartItems);
    }

    public function placeOrder()
    {
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p

        if (count($this->cartItems) == 0) {
            $this->alert('error', 'Gi·ªè h√†ng tr·ªëng', [
                'timer' => 3000,
                'timerProgressBar' => true,
            ]);
            return;
        }
        if ($this->fullName == null) {
            $this->alert('error', 'Vui l√≤ng nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß', [
                'timer' => 3000,
                'timerProgressBar' => true,
            ]);
            return;
        }
        if ($this->phone == null) {
            $this->alert('error', 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i', [
                'timer' => 3000,
                'timerProgressBar' => true,
            ]);
            return;
        }
        if ($this->address == null) {
            $this->alert('error', 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ', [
                'timer' => 3000,
                'timerProgressBar' => true,
            ]);
            return;
        }
        // L∆∞u th√¥ng tin ƒë∆°n h√†ng v√†o b·∫£ng orders
        $order = Order::create([
            'user_id' => $this->user->id ?? 6,
            'address' => $this->address,
            'phone' => $this->phone,
            'full_name' => $this->fullName,
            'status' => 'pending',
            'total' => $this->calculateSubtotal(),
            'shipping_method' => $this->shippingMethod,
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        // L∆∞u th√¥ng tin c√°c s·∫£n ph·∫©m v√†o b·∫£ng order_items
        foreach ($this->cartItems as $item) {
            $itemTotal = $item['quantity'] * $item['price']; // T√≠nh t·ªïng ti·ªÅn cho s·∫£n ph·∫©m

            OrderItem::create([
                'order_id' => $order->id,
                'product_id' => $item['product_id'], // Gi·∫£ s·ª≠ b·∫°n c√≥ product_id trong cartItems
                'quantity' => $item['quantity'], // Gi·∫£ s·ª≠ b·∫°n c√≥ quantity trong cartItems
                'price' => $item['price'], // Gi·∫£ s·ª≠ b·∫°n c√≥ price trong cartItems
                'total' => $itemTotal, // L∆∞u t·ªïng ti·ªÅn v√†o c·ªôt total
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë√£ b√°n cho s·∫£n ph·∫©m
            $product = Product::find($item['product_id']); // T√¨m s·∫£n ph·∫©m theo product_id
            if ($product) {
                $product->increment('sold', $item['quantity']); // TƒÉng s·ªë l∆∞·ª£ng sold l√™n
            }
        }

        // X√≥a gi·ªè h√†ng
        CartManagement::clearCartItems();
        $this->sendWhatsappMessage($order->id);

        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang c·∫£m ∆°n c√πng v·ªõi ID ƒë∆°n h√†ng
        return redirect()->to('/thankyou/' . $order->id);
    }


    public function sendWhatsappMessage($orderId)
{
    $order = Order::find($orderId);

    if (!$order) {
        return redirect()->back()->with('error', 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i.');
    }

    // Get the order items associated with the order
    $orderItems = OrderItem::where('order_id', $orderId)->get();

    // Prepare the order items details
    $itemsDetails = '';
    foreach ($orderItems as $item) {
        $itemsDetails .= "üì¶ *S·∫£n ph·∫©m:* " . $item->product->name . "\n" . // Assuming you have a relationship set up
                         "üî¢ *S·ªë l∆∞·ª£ng:* " . $item->quantity . "\n" .
                         "üí≤ *Gi√°:* " . number_format($item->price, 0, ',', '.') . " VNƒê\n" .
                         "-----------------------------------\n"; // Separator for items
    }

    $messageBody = "üåü **Th√¥ng tin ƒë∆°n h√†ng** üåü\n" .
        "ƒê∆°n h√†ng: *#{$orderId}*\n" .
        "üí∞ **S·ªë ti·ªÅn:** " . number_format($order->total, 0, ',', '.') . " VNƒê\n" .
        "üïí **Th·ªùi gian:** " . $order->created_at->format('d/m/Y H:i:s') . "\n" .
        "üë§ **Kh√°ch h√†ng:** " . $order->full_name . "\n" .
        "üìû **S·ªë ƒëi·ªán tho·∫°i:** " . $order->phone . "\n" .
        "üè† **ƒê·ªãa ch·ªâ:** " . $order->address . "\n" .
        "üöö **Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn:** " . $order->shipping_method . "\n\n" .
        "üîç **Chi ti·∫øt s·∫£n ph·∫©m:**\n" . $itemsDetails;

    $url = "https://api.ultramsg.com/instance108300/messages/chat?token=nsbd3uj7o02uz87h&to=+84335139450&body=" . urlencode($messageBody);

    $response = Http::get($url);

    if ($response->successful()) {
        $this->alert('success', 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!', [
            'timer' => 3000,
            'timerProgressBar' => true,
        ]);
    } else {
        $this->alert('error', 'G·ª≠i tin nh·∫Øn th·∫•t b·∫°i: ' . $response->body(), [
            'timer' => 3000,
            'timerProgressBar' => true,
        ]);
    }
}
    public function render()
    {
        return view('livewire.checkout', [
            'cartItems' => $this->cartItems, // Truy·ªÅn gi·ªè h√†ng v√†o view
            'subtotal' => $this->calculateSubtotal(), // T√≠nh to√°n t·ªïng s·ªë ti·ªÅn
            'user' => $this->user, // Truy·ªÅn th√¥ng tin ng∆∞·ªùi d√πng v√†o view
        ]);
    }
}
